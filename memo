암호 해독

function solution(cipher, code) {
  let list = ''
  for (let i = 0; i < cipher.length; i++) {
      if (i !== 0) {
        if (code === 1) return cipher
        if (cipher[i * code - 1] !== undefined)
          list += cipher[i * code - 1]
      }
  }
  return list
}

function solution(cipher, code) {
  var answer = "";
  for (let i = code - 1; i < cipher.length; i += code) {
    answer += cipher[i];
  }
  return answer;
}

개미군단 

function solution(hp) {
  const a = 5
  const b = 3
  const c = 1
  let e = 0
  let f = 0
  let g = 0
  
  if (hp % a === 0) e = hp / a
  
  if (hp % a !== 0) {
    e = Math.floor(hp / a)
    if ((hp - e * a) % b === 0) f = (hp - e * a) / b
    if ((hp - e * a) % b !== 0) {
      f = Math.floor((hp - e * a) / b)
      g = hp - e * a - b * f
    }
  }
  return e + f + g
}

function solution(hp) {
    return Math.floor(hp/5)+Math.floor((hp%5)/3)+(hp%5)%3;
}

제곱수 판별하기

function solution(n) {
    const list = []
    for (let i = 0; i < 1000000; i++) {
        list.push(i ** 2)
    }
    for (let i = 0; i< list.length; i++) {
        if (list[i] === n) return 1    
    }
    return 2
}

function solution(n) {
    for (let i = 0; i * i <= n; i++) {
        if (i * i === n) return 1
    }

    return 2;
}

문자열안에 문자열 (indexOf 사용하지 않고)

* function solution(str1, str2) {
  let str1Length = str1.length;
  let str2Length = str2.length;

  for (let i = 0; i < str1Length - str2Length + 1; i++) {
    let matched = true;

    for (let j = 0; j < str2Length; j++) {
      if (str1[i + j] !== str2[j]) {
        matched = false;
        break;
      }
    }

    if (matched) {
      return 1;
    }
  }

  return 2;
}

* function solution(str1, str2) {
  let result = 2;

  for (let i = 0; i < str1.length - str2.length + 1; i++) {
    if (str1[i] === str2[0]) {
      let flag = true;
      for (let j = 1; j < str2.length; j++) {
        if (str1[i + j] !== str2[j]) {
          flag = false;
          break;
        }
      }
      if (flag) {
        result = 1;
        break;
      }
    }
  }

  return result;
}

자릿수 더하기 

function solution(n) {
  const newList = []
  const a = String(n)
  let sum = 0;
  for (let i = 0; i < a.length; i++) {
    newList.push(a[i])
  }
  
  for (let i = 0; i < newList.length; i++) {
    sum += parseInt(newList[i])
  }
  return sum
}

function solution(n) {
  return n
    .toString()
    .split("")
    .reduce((acc, cur) => acc + Number(cur), 0);
}

특정 문자 제거하기

function solution(my_string, letter) {
    const newString = []
    for (let i = 0; i < my_string.length; i++) {
        if (my_string[i] !== letter) {
            newString.push(my_string[i])
        }
    }
    return newString.join('')
}

function solution(my_string, letter) {
    let reg = new RegExp(letter, 'g');
    return my_string.replace(reg, '');
}

최댓값 만들기

function solution(numbers) {
  for (let i = 0; i < numbers.length; i++) {
    for (let j = 0; j < numbers.length; j++) {
      if (numbers[j] < numbers[j + 1]) {
        let b = numbers[j]
        numbers[j] = numbers[j + 1]
        numbers[j + 1] = b
      } 
    }
  }
  return numbers[0] * numbers[1];
}

function solution(numbers) {
  numbers.sort((a,b)=>b-a);
  return numbers[0]*numbers[1];
}


문자열 뒤집기

function solution(my_string) {
  let newString = ''
  for (let i = my_string.length - 1; i >= 0; i--) {
      newString += my_string[i]
  }
  return newString
}

function solution(my_string) {
  return my_string.split('').reverse().join('');
}

filter

1 중복된 숫자 개수

function solution(array, n) {
  const arrayList = []
  for (let i = 0; i < array.length; i++) {
      if (array[i] === n) {
          arrayList.push(array[i])
      }
  }
  return arrayList.length
}

function solution(array, n) {
  return array.filter(v=>v===n).length;
}

2 짝수 홀수 개수

function solution(num_list) {
  const newList1 = []
  const newList2 = []
  const newList3 = []
  for (let i = 0; i < num_list.length; i++) {
      if (num_list[i] % 2 === 0) {
          newList1.push(num_list[i])
      }
      if (num_list[i] % 2 !== 0) {
          newList2.push(num_list[i])
      }
  }
  newList3.push(newList1.length)
  newList3.push(newList2.length)
  return newList3
}

function solution(num_list) {
  return [
    num_list.filter((num) => num % 2 === 0).length,
    num_list.filter((num) => num % 2 === 1).length,
  ];
}

3 배열의 유사도

function solution(s1, s2) {
    let a = 0
    for (let i = 0; i < s1.length; i++) {
        for (let j = 0; j < s2.length; j++) {
            if (s1[i] === s2[j]) a++;
        }
    }
    return a
}

function solution(s1, s2) {
    const intersection = s1.filter((x) => s2.includes(x));
    return intersection.length;
}

~~ tilt 양꼬치

function solution(n, k) {
  const aif = Math.floor(n / 10)
  const result = n * 12000 + k * 2000
  if (aif >= 1) {
      return result - aif * 2000
  }
  return result
}

function solution(n, k) {
    k-=~~(n/10);
    if (k < 0) k = 0;
    return n*12000+k*2000;
}

map 배열 원소의 길이

function solution(strlist) {
  const newList = []
  for (let i = 0; i < strlist.length; i++) {
      newList.push(strlist[i].length)
  }
  return newList
}

function solution(strlist) {
    return strlist.map((el) => el.length)
}