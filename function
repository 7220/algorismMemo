배열 뒤집기

for (let i = 0; i < len; i++) {
  result[i] = numbers[(len - (i + 1)) % len];}

배열 오른쪽 한칸씩 이동(unshift, pop), 왼쪽 한칸씩 이동(shift, push)

function solution(numbers, direction) {
  const len = numbers.length;
  const result = new Array(len);

  for (let i = 0; i < len; i++) {
      if (direction === 'left') {
          result[(i + 1) % len] = numbers[i];
      } else {
          result[(i + len - 1) % len] = numbers[i];
      }
  }
  return result;
}

회원인증(로그인)

function solution(id_pw, db) {
  console.log(id_pw.indexOf(""))
  if (id_pw.indexOf("") >= 0) return "fail"
  
  for (let i = 0; i < db.length; i++) {
    // ID 와 PW 함께 일치하는지 확인
    if (id_pw[0] === db[i][0] && id_pw[1] === db[i][1]) return "login" 
      // ID 확인
    else if (id_pw[0] === db[i][0]) {
      // PW 확인
      if (id_pw[1] !== db[i][1]) return "wrong pw" 
    }
  }
  return "fail"
}

function solution(id_pw, db) {
    let ID_CHECK = false;
    let PW_CHECK = false;

    db.map((item) => {

        // console.log(item ,id_pw)

        // 아이디와 비밀번호가 같은 경우 그냥 return
        if (item[0] === id_pw[0] && item[1] === id_pw[1]) {
            console.log(item)
            console.log(id_pw)
            ID_CHECK = true;
            PW_CHECK = true;
            return
        }

        // ID가 같은 경우 ID_CHECK를 true로 만들고, PW를 체킹
        if (item[0] === id_pw[0]) {
            ID_CHECK = true;
            if (item[1] === id_pw[1]) {
                PW_CHECK = true;
            }
        }

    })

    if (ID_CHECK && PW_CHECK) {
        return "login";
    } else if (ID_CHECK && PW_CHECK === false) {
        return "wrong pw";
    } else {
        return "fail";
    }
}

